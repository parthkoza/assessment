CREATE DATABASE inventory;

CREATE TABLE salesman(salseman_id int,
		      name varchar(200),
		      city varchar(100),
		      commission float,
		      PRIMARY KEY(salesman_id)
		      );

INSERT INTO salesman(salesman_id,name,city,commission)
VALUES(5001,'James Hoog','New York',0.15),
(5002,'Nail Knite','Paris',0.13),
(5005,'Pit Alex','London',0.11),
(5006,'Mc Lyon','Paris',0.14),
(5007,'Paul Adam','Rome',0.13),
(5003,'Lauson Hen','San Jose',0.12);

CREATE TABLE customer(customer_id int,
		      cus_name varchar(200),
		      city varchar(100),
		      grade int,
                      salesman_id int,
		      PRIMARY KEY(customer_id),
                      FOREIGN KEY(salesman_id) REFERENCES salesman(salesman_id)
                      );

INSERT INTO customer(customer_id,cus_name,city,grade,salesman_id)
VALUES(3002,'Nick Rimando','New York',100,5001),
(3007,'Brad Davis','New York',200,5001),
(3005,'Graham Zusi','California',200,5002),
(3008,'Julian Green','London',300,5002),
(3004,'Fabian Johnson','Paris',300,5006),
(3009,'Geoff Cameron','Berlin',100,5003),
(3003,'Jozy Altidor','Moscow',200,5007),
(3001,'Brad Guzan','London',100,5005);


CREATE TABLE orders(order_no int,
		    purch_amt float,
		    odrer_date date,
                    salesman_id int,
                    customer_id int,
		    PRIMARY KEY(order_no),
                    FOREIGN KEY(salesman_id) REFERENCES salesman(salesman_id),
                    FOREIGN KEY(customer_id) REFERENCES customer(customer_id)
                    );
INSERT INTO orders(order_no,purch_amt,odrer_date,customer_id,salesman_id)
VALUES(70001,150.5,'2012-10-05',3005,5002),
(70009,270.65,'2012-09-10',3001,5005),
(70002,65.26,'2012-10-05',3002,5001),
(70004,110.5,'2012-08-17',3009,5003),
(70007,948.5,'2012-09-10',3005,5002),
(70005,2400.6,'2012-07-27',3007,5001),
(70008,5760,'2012-09-10',3002,5001),
(70010,1983.43,'2012-10-10',3004,5006),
(70003,2480.4,'2012-10-10',3009,5003),
(70012,250.45,'2012-06-27',3008,5002),
(70011,75.29,'2012-08-17',3003,5007),
(70013,3045.6,'2012-04-25',3002,5001);


**QUERIES**
1)From the salseman table, write a SQL query to locate salespeople who live in the city of 'Paris'. Return salesperson's name, city.
--> SELECT name,city FROM salesman WHERE city='Paris';

2)From the orders table, write a SQL query to identify the unique salespeople ID. Return salesman_id.
--> SELECT DISTINCT salesman_id FROM orders;

3)From the customer table, write a SQL query to find customers whose grade is 200. Return customer_id, cust_name, city, grade, salesman_id.
--> SELECT * FROM customer WHERE grade=200;

4)From the order table, write a SQL query to find orders that are delivered by a salesperson with ID. 5001. Return ord_no, ord_date, purch_amt.
--> SELECT order_no,odrer_date,purch_amt FROM orders WHERE salesman_id=5001;

5)From the customer table, write a SQL query to locate the details of customers with grade values above 100. 
Return customer_id, cust_name, city, grade, and salesman_id.
--> SELECT * FROM customer WHERE grade>100;

6)From the customer table, write a SQL query to find all the customers in ‘New York’ city who have a grade value above 100. 
Return customer_id, cust_name, city, grade, and salesman_id.
--> SELECT * FROM customer WHERE grade>100 AND city='New York';

7)From the customer table, write a SQL query to find customers who are either from the city 'New York' or who do not have a grade greater than 100. 
Return customer_id, cust_name, city, grade, and salesman_id.
-->SELECT * FROM customer WHERE city = 'New York' OR  grade<=100;

8)From the customer table, write a SQL query to identify customers who do not belong to the city of 'New York' or have a grade value that exceeds 100
--> SELECT * FROM customer WHERE NOT(grade>100 OR city='New York');

9)From the orders table, write a SQL query to find details of all orders excluding those with ord_date equal to '2012-09-10' and salesman_id higher than 5005 or purch_amt greater than 1000.
--> SELECT * FROM orders WHERE NOT((odrer_date='2012-09-10' AND salesman_id >5005) OR purch_amt>1000);

10)From the salesman table, write a SQL query to find the details of those salespeople whose commissions range from 0.10 to 0.12.
--> SELECT * FROM salesman WHERE commission>0.10 AND commission<0.12;

11)From the orders table, write a SQL query to find details of all orders with a purchase amount less than 200 or exclude orders with an order date greater than or equal to '2012-02-10' and a customer ID less than 3009.
--> SELECT * FROM orders WHERE purch_amt<200.00 OR NOT(odrer_date>='2012-02-10' AND customer_id<3009);

12)From the orders table, write a SQL query to find all orders that meet the following conditions. Exclude combinations of order date equal to '2012-08-17' or customer ID greater than 3005 and purchase amount less than 1000.
--> SELECT * FROM  orders WHERE NOT((odrer_date ='2012-08-17' OR customer_id>3005) AND purch_amt<1000);

13)Write a SQL query that displays order number, purchase amount, and the achieved and unachieved percentage (%) for those orders that exceed 50% of the target value of 6000.
--> SELECT order_no,purch_amt, (100*purch_amt)/6000 AS "Achieved %", (100*(6000-purch_amt)/6000) AS "Unachieved %" FROM  orders WHERE (100*purch_amt)/6000>50.00;

14)From the salesman table, write a SQL query to find the details of those salespeople who come from the 'Paris' City or 'Rome' City.
--> SELECT * FROM salesman WHERE city='Paris' OR city='Rome';

15)From the salesman table, write a SQL query to find the details of the salespeople who come from either 'Paris' or 'Rome'.
--> SELECT * FROM salesman WHERE city IN('Paris','Rome');

16)From the salesman table, write a SQL query to find the details of those salespeople who live in cities other than Paris and Rome.
--> SELECT * FROM salesman WHERE NOT city IN('Paris','Rome');

17)From the customer table, write a SQL query to retrieve the details of all customers whose ID belongs to any of the values 3007, 3008 or 3009.
--> SELECT * FROM customer WHERE customer_id IN(3007,3008,3009);

18) From the salesman table, write a SQL query to find salespeople who receive commissions between 0.12 and 0.14 (begin and end values are included).
--> SELECT * FROM salesman WHERE commission BETWEEN 0.12 AND 0.14;

19)From the orders table, write a SQL query to select orders between 500 and 4000 (begin and end values are included). Exclude orders amount 948.50 and 1983.43.
--> SELECT * FROM orders WHERE (purch_amt BETWEEN 500 AND 4000) AND NOT purch_amt IN(948.50,1983.43);

20)From the salesman table, write a SQL query to retrieve the details of the salespeople whose names begin with any letter between 'A' and 'L' (not inclusive).
--> SELECT * FROM salesman WHERE name BETWEEN 'A' and 'L';

21)From the salseman table, write a SQL query to find the details of all salespeople except those whose names begin with any letter between 'A' and 'L' (not inclusive).
--> SELECT * FROM salesman WHERE NOT name BETWEEN 'A' and 'L';

22)From the customer table, write a SQL query to retrieve the details of the customers whose names begins with the letter 'B'.
--> SELECT * FROM customer WHERE cus_name LIKE 'B%';

23)From the customer table, write a SQL query to find the details of the customers whose names end with the letter 'n'.
--> SELECT * FROM customer WHERE cus_name LIKE '%n';

24)From the salseman table, write a SQL query to find the details of those salespeople whose names begin with ‘N’ and the fourth character is 'l'. 
Rests may be any character.
--> SELECT * FROM salesman WHERE name LIKE 'N__l%';

25)From the orders table, write a SQL query to calculate total purchase amount of all orders. Return total purchase amount.
--> SELECT SUM(purch_amt) FROM orders;

26)From the orders table, write a SQL query to calculate the average purchase amount of all orders. Return average purchase amount.
--> SELECT AVG(purch_amt) FROM orders;

27)From the orders table, write a SQL query that counts the number of unique salespeople. Return number of salespeople. 
--> SELECT COUNT(DISTINCT salesman_id) FROM orders;.

28)From the customer table, write a SQL query to count the number of customers. Return number of customers.
--> SELECT COUNT(customer_id) FROM customer;

29)From the orders table, write a SQL query to find the maximum purchase amount.
--> SELECT MAX(purch_amt) FROM orders;

30)From the orders table, write a SQL query to find the minimum purchase amount.
--> SELECT MIN(purch_amt) FROM orders;

31)From the customer table, write a SQL query to find the highest grade of the customers in each city. 
Return city, maximum grade.
--> SELECT city,MAX(grade) FROM customer GROUP BY city; 

32)From the orders table, write a SQL query to find the highest purchase amount ordered by each customer. 
Return customer ID, maximum purchase amount.
--> SELECT customer_id,MAX(purch_amt) FROM orders GROUP BY customer_id;

33)From the orders table, write a SQL query to find the highest purchase amount ordered by each customer on a particular date. 
Return, order date and highest purchase amount.
--> SELECT customer_id,odrer_date,MAX(purch_amt) FROM orders GROUP BY customer_id,odrer_date;

34)From the orders table, write a SQL query to determine the highest purchase amount made by each salesperson on '2012-08-17'. 
Return salesperson ID, purchase amount.
--> SELECT salesman_id,MAX(purch_amt) FROM orders WHERE odrer_date = '2012-08-17' GROUP BY salesman_id;

35)From the orders table, write a SQL query to find the highest order (purchase) amount by each customer on a particular order date. 
Filter the result by highest order (purchase) amount above 2000.00. Return customer id, order date and maximum purchase amount.
--> SELECT customer_id,odrer_date,MAX(purch_amt) FROM orders GROUP BY customer_id,odrer_date HAVING MAX(purch_amt)>2000.00;

36)From the orders table, write a SQL query to find the maximum order (purchase) amount in the range 2000 - 6000 (Begin and end values are included.) by combination of each customer and order date. 
Return customer id, order date and maximum purchase amount.
--> SELECT customer_id,odrer_date,MAX(purch_amt) FROM orders GROUP BY customer_id,odrer_date HAVING MAX(purch_amt) BETWEEN 2000 AND 6000;

37)From the orders table, write a SQL query to find the maximum order (purchase) amount based on the combination of each customer and order date. 
Filter the rows for maximum order (purchase) amount is either 2000, 3000, 5760, 6000. Return customer id, order date and maximum purchase amount.
--> SELECT customer_id,odrer_date,MAX(purch_amt) FROM orders GROUP BY customer_id,odrer_date HAVING MAX(purch_amt) IN(2000 ,3000,5760, 6000);

38)From the orders table, write a SQL query to determine the maximum order amount for each customer. The customer ID should be in the range 3002 and 3007(Begin and end values are included.). 
Return customer id and maximum purchase amount.
--> SELECT customer_id,MAX(purch_amt) FROM orders WHERE customer_id BETWEEN 3002 and 3007 GROUP BY customer_id;

39)From the following table, write a SQL query to find the maximum order (purchase) amount for each customer. The customer ID should be in the range 3002 and 3007(Begin and end values are included.). 
Filter the rows for maximum order (purchase) amount is higher than 1000. Return customer id and maximum purchase amount.
--> SELECT customer_id,MAX(purch_amt) FROM orders WHERE customer_id BETWEEN 3002 and 3007 GROUP BY customer_id HAVING MAX(purch_amt)>1000;

40)From the orders table, write a SQL query to determine the maximum order (purchase) amount generated by each salesperson. 
Filter the rows for the salesperson ID is in the range 5003 and 5008 (Begin and end values are included.). Return salesperson id and maximum purchase amount.
--> SELECT salesman_id,MAX(purch_amt) FROM orders GROUP BY salesman_id HAVING salesman_id BETWEEN 5003 AND 5008;

41)From the orders table, write a SQL query to count all the orders generated on '2012-08-17'. Return number of orders.
--> SELECT COUNT(order_no) FROM orders WHERE odrer_date='2012-08-17';

42)From the salseman table, write a SQL query to count the number of salespeople in a city. Return number of salespeople.
--> SELECT COUNT(*) FROM salesman WHERE city IS NOT NULL;

43)From the orders table, write a SQL query to count the number of orders based on the combination of each order date and salesperson. Return order date, salesperson id.
--> SELECT odrer_date,salesman_id,COUNT(*) FROM orders GROUP BY odrer_date,salesman_id;
